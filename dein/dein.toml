# Shougo-san's
# dein {{{
[[plugins]]
repo = 'Shougo/dein.vim'
# }}}

# denite {{{
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  nnoremap [denite] <nop>
  xnoremap [denite] <nop>
  nmap <Space> [denite]
  xmap <Space> [denite]

  " Unite
  nnoremap [denite]  :Denite
  nnoremap [denite]b :Denite buffer<CR>
  nnoremap [denite]o :Denite bookmark<CR>
  nnoremap [denite]f :Denite find<CR>
  nnoremap [denite]g :Denite grep<CR>
  nnoremap [denite]k :Denite fhc<CR>
  nnoremap [denite]l :Denite line<CR>
  nnoremap [denite]m :Denite menu<CR>
  nnoremap [denite]o :Denite outline<CR>
  nnoremap [denite]s :Denite snippet<CR>
  nnoremap [denite]t :Denite tab<CR>
  nnoremap [denite]r :Denite -resume<CR>
  nnoremap [denite]z :Denite file_old<CR>
  call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>', 'noremap')
  call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>', 'noremap')

'''
hook_post_source = '''
  call denite#custom#var('file_rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
  call denite#custom#var('grep', 'command', ['ag'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', [])
  call denite#custom#var('grep', 'default_opts', ['--follow', '--no-group', '--no-color'])
'''
# }}}

# deoplete {{{
[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
let g:deoplete#enable_at_startup = 1
'''
# }}}


# Common
# vim-anzu {{{
[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  let g:anzu_status_format = 'search : %#WarningMsg#%p %#Keyword#(%i/%l)%#None# : status'
  nnoremap <Esc><Esc> :nohlsearch<CR>
  nmap n <Plug>(anzu-n-with-echo)
  nmap N <Plug>(anzu-N-with-echo)
  nmap * <Plug>(anzu-star-with-echo)N
  nmap # <Plug>(anzu-)sharp-with-echo)N
'''
# }}}

# lightline {{{
[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['osyo-manga/vim-anzu']
hook_add = '''
  let g:lightline = {
    \ 'colorscheme': 'powerline',
    \ 'active': {
      \   'left': [
      \       ['mode', 'paste'],
      \       ['readonly', 'filename', 'modified', 'anzu']
      \   ]
      \ },
      \ 'component_function': {
      \   'anzu': 'anzu#search_status'
      \ }
    \ }
  let g:unite_force_overwrite_statusline    = 0
  let g:vimfiler_force_overwrite_statusline = 0
  let g:vimshell_force_overwrite_statusline = 0
''' 
# }}}

# yankaround {{{
[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add = '''
  nmap p <Plug>(yankround-p)
  xmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  xmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)
  nmap <C-p> <Plug>(yankround-prev)
  nmap <C-n> <Plug>(yankround-next)
'''
# }}}

# ctrlp {{{
[[plugins]]
repo = 'kien/ctrlp.vim'
hook_add = '''
  let g:ctrlp_map = '<C-f>'
  let g:ctrlp_working_path_mode = ""
  let g:ctrlp_max_files=0
  let g:ctrlp_custom_ignore = '\v[\/]\.?(git|hg|svn|node_modules|bower_components)$'
  let g:ctrlp_prompt_mappings = {
    \ 'PrtBS()':              ['<bs>'],
    \ 'PrtDeleteWord()':      ['<del>'],
    \ 'PrtCurEnd()':          ['<nop>'],
    \ 'PrtCurLeft()':         ['<nop>'],
    \ 'PrtCurRight()':        ['<nop>'],
    \ 'PrtHistory(-1)':       ['<nop>'],
    \ 'PrtHistory(1)':        ['<nop>'],
    \ 'PrtInsert()':          ['<nop>'],
    \ 'PrtCurStart()':        ['<nop>'],
    \ 'PrtClearCache()':      ['<c-r>'],
    \ 'PrtDeleteEnt()':       ['<nop>'],
    \ 'PrtClear()':           ['<c-d>'],
    \ 'PrtExit()':            ['<nop>', '<esc>', '<c-c>'],
    \ 'PrtExpandDir()':       ['<tab>'],
    \ 'PrtDelete()':          ['<nop>'],
    \ 'PrtSelectMove("t")':   ['<nop>'],
    \ 'PrtSelectMove("b")':   ['<nop>'],
    \ 'PrtSelectMove("u")':   ['<nop>'],
    \ 'PrtSelectMove("d")':   ['<nop>'],
    \ 'ToggleRegex()':        ['<F5>'],
    \ 'ToggleByFname()':      ['<nop>'],
    \ 'ToggleFocus()':        ['<nop>'],
    \ 'ToggleType(1)':        ['<nop>'],
    \ 'ToggleType(-1)':       ['<nop>'],
    \ 'AcceptSelection("e")': ['<cr>'], 
    \ 'AcceptSelection("h")': ['<nop>'], 
    \ 'AcceptSelection("t")': ['<nop>'],
    \ 'AcceptSelection("v")': ['<nop>'],
    \ 'CreateNewFile()':      ['<nop>'],
    \ 'MarkToOpen()':         ['<nop>'],
    \ 'OpenMulti()':          ['<nop>'],
    \ }
'''
# }}}

# vim-textmanip {{{
[[plugins]]
repo = 't9md/vim-textmanip'
hook_add = '''
  vmap <C-j> <Plug>(textmanip-move-down)
  vmap <C-k> <Plug>(textmanip-move-up)
  vmap <C-h> <Plug>(textmanip-move-left)
  vmap <C-l> <Plug>(textmanip-move-right)
'''
# }}}

# Key operation enhancer
# vim-arpeggio {{{
[[plugins]]
repo = 'kana/vim-arpeggio'
hook_add = '''
  if !exists('g:arpeggio_loaded')
    let g:arpeggio_loaded = 1
  
  " Settings
  call arpeggio#load()
    let g:arpeggio_timeoutlen = 50
    
    " Window
    Arpeggio nnoremap wh <C-w>h
    Arpeggio nnoremap wj <C-w>j
    Arpeggio nnoremap wk <C-w>k
    Arpeggio nnoremap wl <C-w>l
    Arpeggio nnoremap wo <C-w>o
    Arpeggio nnoremap wc <C-w>c
    Arpeggio nnoremap wq <C-w>c
    Arpeggio nnoremap w8 <C-w>s<Plug>(anzu-star)N
    Arpeggio nnoremap w3 <C-w>s<Plug>(anzu-sharp)N
    
    " Split
    Arpeggio nnoremap sh :vsp<CR>
    Arpeggio nnoremap sj :sp<CR><C-w>j
    Arpeggio nnoremap sk :sp<CR>
    Arpeggio nnoremap sl :vsp<CR><C-w>l
    
    " Easy Motion
    Arpeggio nmap em _w
    Arpeggio nmap EM _b
  
  endif
'''
# }}}

# clever-f {{{
[[plugins]]
repo = 'rhysd/clever-f.vim'
hook_source = '''
  let g:clever_f_across_no_line    = 0
  let g:clever_f_ignore_case       = 1
  let g:clever_f_use_migemo        = 1
  let g:clever_f_fix_key_direction = 0
  let g:clever_f_show_prompt       = 1
'''
# }}}

# vim-surround {{{
[[plugins]]
repo = 'tpope/vim-surround'
# }}}

# vim-easymotion {{{
[[plugins]]
repo = 'Lokaltog/vim-easymotion'
hook_add = '''
  let s:EasyMotion_keys       = 'hjklasdgqwertyuiopzxcvbnm'
  let g:EasyMotion_leader_key = '_'
  let g:EasyMotion_grouping   = 1
  
  hi clear EasyMotionTarget
  hi clear EasyMotionShade
  hi EasyMotionTarget ctermbg=none ctermfg=12  guibg=NONE guifg=#aa0000
  hi EasyMotionShade  ctermbg=none ctermfg=232 guibg=NONE guifg=#222222
'''
# }}}

# vim-alignta {{{
[[plugins]]
repo = 'h1mesuke/vim-alignta'
hook_add = '''
	nnoremap [unite]a :<C-u>Unite alignta:options<CR>
	xnoremap [unite]a :<C-u>Unite alignta:arguments<CR>

	let g:unite_source_alignta_preset_arguments = [
		\ ["Align at '='", '=>\='],
		\ ["Align at ':'", '01 :'],
		\ ["Align at ':'", '11 :'],
		\ ["Align at ':'", '01 :/1'],
		\ ["Align at ':'", '11 :/1'],
		\ ["Align at '|'", '|'   ],
		\ ["Align at ')'", '0 )' ],
		\ ["Align at ']'", '0 ]' ],
		\ ["Align at '}'", '}'   ],
	\]

	vnoremap a  :Alignta
	vnoremap a= :Alignta =<CR>
	vnoremap a+ :Alignta +<CR>
	vnoremap a: :Alignta 11 :/1<CR>
	vnoremap a; :Alignta 11 :/1<CR>
	vnoremap a, :Alignta 01 ,<CR>
'''
# }}}

# Visual Style 
# molokai {{{
[[plugins]]
repo = 'tomasr/molokai'
hook_add = '''
  let g:molokai_original = 1
  let g:rehash256 = 1
'''
# }}}

