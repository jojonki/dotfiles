# Shougo-san's
# dein {{{
[[plugins]]
repo = 'Shougo/dein.vim'
# }}}

# denite {{{
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  nnoremap [denite]  :Denite
  nnoremap [denite]g :Denite grep<CR>
  nnoremap [denite]r :Denite -resume<CR>
  nnoremap [denite]f :Denite file/rec<CR>
  nnoremap [denite]F :Denite file<CR>

  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>      denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d         denite#do_map('do_action', 'delete')
    " preview
    nnoremap <silent><buffer><expr> p         denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> i         denite#do_map('open_filter_buffer')
    " select
    nnoremap <silent><buffer><expr> <Space>   denite#do_map('toggle_select')
    " quit
    nnoremap <silent><buffer><expr> q         denite#do_map('quit')
    inoremap <silent><buffer><expr> <C-c>     denite#do_map('quit')
    nnoremap <silent><buffer><expr> <C-c>     denite#do_map('quit')
  endfunction
  let s:denite_win_width_percent = 0.85
  let s:denite_win_height_percent = 0.7

  " Change denite default options
  call denite#custom#option('default', {
      \ 'split': 'floating',
      \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
      \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
      \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
      \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
  \ })
'''
# }}}

# deoplete {{{
#[[plugins]]
#repo = 'Shougo/deoplete.nvim'
#hook_add = '''
#  let g:deoplete#enable_at_startup = 1
#  set completeopt+=noinsert
#'''
# }}}

# vimproc {{{
[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''
#}}}

# Common
# vim-anzu {{{
[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  let g:anzu_status_format = 'search : %#WarningMsg#%p %#Keyword#(%i/%l)%#None# : status'
  nnoremap <Esc><Esc> :nohlsearch<CR>
  nmap n <Plug>(anzu-n-with-echo)
  nmap N <Plug>(anzu-N-with-echo)
  nmap * <Plug>(anzu-star-with-echo)N
  nmap # <Plug>(anzu-)sharp-with-echo)N
'''
# }}}

# lightline {{{
[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['osyo-manga/vim-anzu']
hook_add = '''
  let g:lightline = {
    \ 'colorscheme': 'powerline',
    \ 'active': {
      \   'left': [
      \       ['mode', 'paste'],
      \       ['readonly', 'filename', 'modified', 'anzu']
      \   ]
      \ },
      \ 'component_function': {
      \   'anzu': 'anzu#search_status'
      \ }
    \ }
  let g:unite_force_overwrite_statusline    = 0
  let g:vimfiler_force_overwrite_statusline = 0
  let g:vimshell_force_overwrite_statusline = 0
''' 
# }}}

# yankaround {{{
[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add = '''
  nmap p <Plug>(yankround-p)
  xmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  xmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)
  nmap <C-p> <Plug>(yankround-prev)
  nmap <C-n> <Plug>(yankround-next)
'''
# }}}

# ctrlp {{{
[[plugins]]
repo = 'kien/ctrlp.vim'
hook_add = '''
  let g:ctrlp_map = '<C-f>'
  let g:ctrlp_working_path_mode = ""
  let g:ctrlp_max_files=0
  let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(exe|so|dll|pickle|model|ipynb|meta|pyc|ipynb)$',
    \ 'link': 'some_bad_symbolic_links',
  \ }
  let g:ctrlp_prompt_mappings = {
    \ 'PrtBS()':              ['<bs>'],
    \ 'PrtDeleteWord()':      ['<del>'],
    \ 'PrtCurEnd()':          ['<nop>'],
    \ 'PrtCurLeft()':         ['<nop>'],
    \ 'PrtCurRight()':        ['<nop>'],
    \ 'PrtHistory(-1)':       ['<nop>'],
    \ 'PrtHistory(1)':        ['<nop>'],
    \ 'PrtInsert()':          ['<nop>'],
    \ 'PrtCurStart()':        ['<nop>'],
    \ 'PrtClearCache()':      ['<c-r>'],
    \ 'PrtDeleteEnt()':       ['<nop>'],
    \ 'PrtClear()':           ['<c-d>'],
    \ 'PrtExit()':            ['<nop>', '<esc>', '<c-c>'],
    \ 'PrtExpandDir()':       ['<tab>'],
    \ 'PrtDelete()':          ['<nop>'],
    \ 'PrtSelectMove("t")':   ['<nop>'],
    \ 'PrtSelectMove("b")':   ['<nop>'],
    \ 'PrtSelectMove("u")':   ['<nop>'],
    \ 'PrtSelectMove("d")':   ['<nop>'],
    \ 'ToggleRegex()':        ['<F5>'],
    \ 'ToggleByFname()':      ['<nop>'],
    \ 'ToggleFocus()':        ['<nop>'],
    \ 'ToggleType(1)':        ['<nop>'],
    \ 'ToggleType(-1)':       ['<nop>'],
    \ 'AcceptSelection("e")': ['<cr>'], 
    \ 'AcceptSelection("h")': ['<nop>'], 
    \ 'AcceptSelection("t")': ['<nop>'],
    \ 'AcceptSelection("v")': ['<nop>'],
    \ 'CreateNewFile()':      ['<nop>'],
    \ 'MarkToOpen()':         ['<nop>'],
    \ 'OpenMulti()':          ['<nop>'],
    \ }
'''
# }}}

# vim-textmanip {{{
[[plugins]]
repo = 't9md/vim-textmanip'
hook_add = '''
  vmap <C-j> <Plug>(textmanip-move-down)
  vmap <C-k> <Plug>(textmanip-move-up)
  vmap <C-h> <Plug>(textmanip-move-left)
  vmap <C-l> <Plug>(textmanip-move-right)
'''
# }}}

# vim-parenmatch {{{
[[plugins]]
repo = 'itchyny/vim-parenmatch'
hook_add = 'let g:loaded_matchparen = 1'
# }}}

# vim-cursorword {{{
[[plugins]]
repo = 'itchyny/vim-cursorword'
# }}}

# incsearch {{{
[[plugins]]
repo = 'haya14busa/incsearch.vim'
hook_add = '''
  let g:incsearch#auto_nohlsearch = 1
'''
# }}}

#  vim-gitgutter {{{
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_enabled         = 0
  let g:gitgutter_highlight_lines = 0

  nnoremap [prefix]gg :GitGutterToggle<CR>
  nnoremap [prefix]gn :GitGutterNextHunk<CR>
  nnoremap [prefix]gN :GitGutterPrevHunk<CR>
'''
# }}}

#  vim-bufkill {{{
[[plugins]]
repo = 'qpkorr/vim-bufkill'
# }}}

# Key operation enhancer
# vim-arpeggio {{{
[[plugins]]
repo = 'kana/vim-arpeggio'
hook_add = '''
  if !exists('g:arpeggio_loaded')
    let g:arpeggio_loaded = 1
  
  " Settings
  call arpeggio#load()
    let g:arpeggio_timeoutlen = 70
   
    " Window
    Arpeggio nnoremap wh <C-w>h
    Arpeggio nnoremap wj <C-w>j
    Arpeggio nnoremap wk <C-w>k
    Arpeggio nnoremap wl <C-w>l
    Arpeggio nnoremap wb :BD<CR> " close buffer without closing window by vim-bufkill
    Arpeggio nnoremap wo <C-w>o " close all but current window
    Arpeggio nnoremap wc <C-w>c " close current window
    Arpeggio nnoremap wq <C-w>c " close current window
    Arpeggio nnoremap w8 <C-w>s<Plug>(anzu-star)N
    Arpeggio nnoremap w3 <C-w>s<Plug>(anzu-sharp)N
    Arpeggio nnoremap wr <C-w>r " 回転

    " Resize
    Arpeggio nnoremap eh <C-w><
    Arpeggio nnoremap ej <C-w>+
    Arpeggio nnoremap ek <C-w>-
    Arpeggio nnoremap el <C-w>>
    
    " Split
    Arpeggio nnoremap sh :vsp<CR>
    Arpeggio nnoremap sj :sp<CR><C-w>j
    Arpeggio nnoremap sk :sp<CR>
    Arpeggio nnoremap sl :vsp<CR><C-w>l
    
    " Easy Motion
    Arpeggio nmap em _w
    Arpeggio nmap EM _b
  
  endif
'''
# }}}

# clever-f {{{
[[plugins]]
repo = 'rhysd/clever-f.vim'
hook_source = '''
  let g:clever_f_across_no_line    = 0
  let g:clever_f_ignore_case       = 1
  let g:clever_f_use_migemo        = 1
  let g:clever_f_fix_key_direction = 0
  let g:clever_f_show_prompt       = 1
'''
# }}}

# vim-surround {{{
[[plugins]]
repo = 'tpope/vim-surround'
# }}}

# vim-easymotion {{{
[[plugins]]
repo = 'Lokaltog/vim-easymotion'
hook_add = '''
  let s:EasyMotion_keys       = 'hjklasdgqwertyuiopzxcvbnm'
  let g:EasyMotion_leader_key = '_'
  let g:EasyMotion_grouping   = 1
  
  hi clear EasyMotionTarget
  hi clear EasyMotionShade
  hi EasyMotionTarget ctermbg=none ctermfg=12  guibg=NONE guifg=#aa0000
  hi EasyMotionShade  ctermbg=none ctermfg=232 guibg=NONE guifg=#222222
'''
# }}}

# vim-alignta {{{
[[plugins]]
repo = 'h1mesuke/vim-alignta'
hook_add = '''
	"nnoremap [unite]a :<C-u>Unite alignta:options<CR>
	"xnoremap [unite]a :<C-u>Unite alignta:arguments<CR>

	let g:unite_source_alignta_preset_arguments = [
		\ ["Align at '='", '=>\='],
		\ ["Align at ':'", '01 :'],
		\ ["Align at ':'", '11 :'],
		\ ["Align at ':'", '01 :/1'],
		\ ["Align at ':'", '11 :/1'],
		\ ["Align at '|'", '|'   ],
		\ ["Align at ')'", '0 )' ],
		\ ["Align at ']'", '0 ]' ],
		\ ["Align at '}'", '}'   ],
	\]

	vnoremap a  :Alignta
	vnoremap a= :Alignta =<CR>
	vnoremap a+ :Alignta +<CR>
	vnoremap a: :Alignta 11 :/1<CR>
	vnoremap a; :Alignta 11 :/1<CR>
	vnoremap a, :Alignta 01 ,<CR>
'''
# }}}

# Visual Style 
# molokai {{{
[[plugins]]
repo = 'tomasr/molokai'
hook_add = '''
  let g:molokai_original = 1
  let g:rehash256 = 1
'''
# }}}

# Runner
# vim-quickrun {{{
[[plugins]]
repo = 'thinca/vim-quickrun'
depends = ['shabadou']
hook_add = '''
  nnoremap [prefix]r :QuickRun<CR>
  " <C-c> で実行を強制終了させる
  " quickrun.vim が実行していない場合には <C-c> を呼び出す
  nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''
hook_post_source = '''
  "ref) http://d.hatena.ne.jp/osyo-manga/20111014/1318586711
  " コンパイラ言語用の outputter
  " :QuickRun -outputter
  " プロセスの実行中しているときは、buffer に出力し、
  " プロセスが終了したら、quickfix へ出力を行う
  let compile = quickrun#outputter#multi#new()
  let compile.config.targets = ["buffer", "quickfix"]
  function! compile.init(session)
      " quickfix を閉じる
      :cclose
      " 元の処理を呼び出す
      call call(quickrun#outputter#multi#new().init, [a:session], self)
  endfunction

  function! compile.finish(session)
      call call(quickrun#outputter#multi#new().finish, [a:session], self)
      " 出力バッファの削除
      bwipeout [quickrun
  endfunction

  " quickrun に outputter を登録
  " call quickrun#register_outputter("compile", compile)
'''
# }}}

# shabadou {{{
[[plugins]]
repo = 'osyo-manga/shabadou.vim'
hook_add = '''
  let g:quickrun_config = {}
	let g:quickrun_config._ = {
		\ 'runner'                                 : 'vimproc',
		\ 'runner/vimproc/updatetime'              : 40,
		\ 'outputter'                              : 'error',
		\ 'outputter/error/success'                : 'buffer',
		\ 'outputter/error/error'                  : 'quickfix',
		\ 'outputter/buffer/split'                 : ':botright 8',
		\ 'outputter/buffer/close_on_empty'        : 1,
		\ 'hook/time/enable'                       : 1,
		\ 'hook/inu/enable'                        : 1,
		\ 'hook/inu/wait'                          : 10,
		\ 'hook/echo/enable'                       : 1,
		\ 'hook/echo/output_success'               : '凸 < ｷﾀｺﾚ!!',
		\ 'hook/echo/output_failure'               : '凹 < ﾍｺﾑﾜ...',
		\ 'hook/close_quickfix/enable_hook_loaded' : 1,
		\ 'hook/close_quickfix/enable_success'     : 1,
		\ 'hook/close_buffer/enable_failure'       : 1,
		\ 'hook/close_buffer/enable_empty_data'    : 1,
	\ }
'''
# }}}

# LSP
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
merge = 0
build = 'coc#util#install()'
hook_add = '''
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)
  " Remap for rename current word
  nmap <leader>rn <Plug>(coc-rename)
  " Highlight symbol under cursor on CursorHold
  autocmd CursorHold * silent call CocActionAsync('highlight')
  " Use K for show documentation in preview window
  nnoremap <silent> K :call <SID>show_documentation()<CR>
  function! s:show_documentation()
    if &filetype == 'vim'
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction
'''
